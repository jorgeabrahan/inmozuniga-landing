---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<article
  class="p-8 xl:min-w-[400px] border-l-2 border-solid border-harvest-gold-600 opacity-0 md:opacity-100 transition-opacity duration-500 ease-in-out"
  data-id="contact-info-card"
>
  <header class="flex items-center gap-2 mb-2">
    <slot name="header-icon" />
    <h2 class="text-2xl font-light">{title}</h2>
  </header>
  <div class="flex flex-col gap-[6px] text-black-700 text-sm">
    <slot />
  </div>
</article>

<script>
  const options = {
    rootMargin: "0px",
    threshold: 1,
  };
  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach((entry) => {
      const entryTarget = entry.target as HTMLElement;
      if (!entryTarget) return;
      const isVisible = entryTarget.style.opacity.trim().length !== 0
      if (isVisible) {
        observer.unobserve(entryTarget)
        return
      }
      if (entry.isIntersecting) {
        entryTarget.style.opacity = "1";
        return;
      }
      entryTarget.style.opacity = "";
    });
  }, options);
  const contactInfoCards = document.querySelectorAll(
    "[data-id='contact-info-card']",
  );
  const mobilesMediaQuery = window.matchMedia("(max-width: 768px)");

  function handleMediaQueryChange(e: MediaQueryListEvent | MediaQueryList) {
    if (e.matches) {
      contactInfoCards.forEach((contactInfoCard) => {
        observer.observe(contactInfoCard);
      });
      return;
    }
    contactInfoCards.forEach((contactInfoCard) => {
      observer.unobserve(contactInfoCard);
    });
  }

  mobilesMediaQuery.addEventListener("change", handleMediaQueryChange);

  handleMediaQueryChange(mobilesMediaQuery);
</script>
